#include <EEPROM.h>
#define EEPROM_MESSAGE_TABLE_MESSAGE_SIZE 10 // Lungimea maximÄƒ a mesajului
#define EEPROM_MESSAGE_TABLE_ENTRIES_SIZE 10
#define EEPROM_MESSAGE_TABLE_START_ADDRESS 0

typedef struct EEPROMMessageEntry
{
  uint8_t valid;
  uint32_t timestamp;
  char message[EEPROM_MESSAGE_TABLE_MESSAGE_SIZE];
} EEPROMMessageEntry;

typedef struct EEPROMMessageTable
{
  EEPROMMessageEntry entry[EEPROM_MESSAGE_TABLE_MESSAGE_SIZE];
} EEPROMMessageTable;

static EEPROMMessageTable messageTable = {0};

static void readMessageTableFromEEPROM(void)
{
  EEPROM.get(EEPROM_MESSAGE_TABLE_START_ADDRESS, messageTable);
}

static void writeMessageTableToEEPROM(void)
{
  EEPROM.put(EEPROM_MESSAGE_TABLE_START_ADDRESS, messageTable);
}

static void addEntryToMessageTable(uint32_t timestamp, char *message)
{
  uint8_t entryIDMinTimestamp = 0;
  uint32_t minTimestamp = 0xFFFFFFFF;
  for (uint8_t entryID = 0; entryID < EEPROM_MESSAGE_TABLE_ENTRIES_SIZE; entryID++)
  {
    // Search for a free field
    if (0 == messageTable.entry[entryID].valid)
    {
      messageTable.entry[entryID].valid = 1;
      messageTable.entry[entryID].timestamp = timestamp;
      strcpy(messageTable.entry[entryID].message, message);

      // Field found
      return;
    }

    if (minTimestamp > messageTable.entry[entryID].timestamp)
    {
      entryIDMinTimestamp = entryID;
      minTimestamp = messageTable.entry[entryID].timestamp;
    }
  }

  // If there isn't any field that is free,
  // we will clear the oldest one and add the new one on it's slot
  messageTable.entry[entryIDMinTimestamp].valid = 1;
  messageTable.entry[entryIDMinTimestamp].timestamp = timestamp;
  strcpy(messageTable.entry[entryIDMinTimestamp].message, message);
}

int val;
int tempPin = A1; // senzor de temperatura
int pinLED = 5;

void setup()
{
  Serial.begin(9600);
  pinMode(pinLED, OUTPUT);

  readMessageTableFromEEPROM();
}

void loop()
{
  val = analogRead(tempPin);
  // Convert to Celsius
  float temperatura = (val * 5.0 * 100.0) / 1024.0;

  uint32_t currentTimestamp = millis();

  Serial.print(temperatura);
  Serial.println();

  if (Serial.available() > 0)
  { // needs revision c:
    char command = Serial.read();
    switch (command)
    {
    case 'A':
      digitalWrite(pinLED, HIGH);
      break;
    case 'S':
      digitalWrite(pinLED, LOW);
      break;
    }

    String message = Serial.readStringUntil('\n');
    // Serial.println("Mesaj primit de la Flask: " + message);
    // Convert String to char*
    char *messageBuffer = strdup(message.c_str());
    // Ensure the messageBuffer is not null
    if (messageBuffer != NULL)
    {
      addEntryToMessageTable(currentTimestamp, messageBuffer);
    }
  }
}
